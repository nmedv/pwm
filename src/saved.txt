static size_t arrSize(const char* arr[])
{

}

static void deserializeData(void)
{
	size_t tableSize = *(size_t*)data;
	uint8_t* table = data + sizeof(size_t);
	uint8_t* data_ptr = table + tableSize;

	for (size_t i = 0; i < tableSize; i++)
	{
		dsData[i] = (char*)data_ptr;
		data_ptr += table[i];
	}
}


static void serializeData(void)
{
	size_t tableSize = dsDataSize;
	*(size_t*)data = tableSize;
	uint8_t* table = data + sizeof(size_t);
	uint8_t* data_ptr = table + tableSize;

	for (auto const& pair : in)
	{
		*table++ = pair.first.size();
		*table++ = pair.second.size();

		strcpy((char*)data_ptr, pair.first.c_str());
		data_ptr += pair.first.size();
		strcpy((char*)data_ptr, pair.second.c_str());
		data_ptr += pair.second.size();
	}
}


int pwm_load(pwm_data_t& in, const char* passw)
{
	genkeyiv(passw, in.salt, in.saltSize, keyIv);

	size_t dataSize = AES256_DECRYPT_SIZE(in.eSize);
	data = (uint8_t*)realloc(data, dataSize);
	int decrypt_len = aes_decrypt(in.eData, in.eSize,
		data, keyIv, keyIv + 16);

	if (!decrypt_len)
		return 0;

	dsData = (char**)realloc(dsData, *(size_t*)data);
	deserializeData(out);

	return 1;
}


int pwm_save(const char* passw, pwm_data_t& out)
{
	out.signature = 0x5057;
	if (!out.saltSize)
		out.saltSize = 8;

	salt = (uint8_t*)realloc(salt, out.saltSize);
	out.salt = salt;
	gensalt(out.salt, out.saltSize);
	genkeyiv(passw, out.salt, out.saltSize, keyIv);
	
	serializeData(in);

	out.eSize = AES256_ENCRYPT_SIZE(dataSize);
	eData = (uint8_t*)realloc(eData, out.eSize);
	out.eData = eData;

	int encrypt_len = aes_encrypt(data, dataSize, eData, keyIv, keyIv + 16);

	return 1;
}